/* Generated By:JavaCC: Do not edit this line. PddlParser.java */
package crisp.pddl;

import crisp.planningproblem.*;
import crisp.planningproblem.goal.*;
import crisp.planningproblem.effect.*;

import de.saar.chorus.term.*;

import java.io.*;
import java.util.*;

public class PddlParser implements PddlParserConstants {
        private Domain domain;
        private Problem problem;

        public PddlParser(Domain domain, Problem problem) {
                this((Reader) null);

            this.domain = domain;
            this.problem = problem;

            domain.clear();
            problem.clear();
        }

        public static void parse(File domainReader, Domain domain, File problemReader, Problem problem)
        throws ParseException, FileNotFoundException
        {
                parse(new FileReader(domainReader), domain, new FileReader(problemReader), problem);
        }


        public static void parse(Reader domainReader, Domain domain, Reader problemReader, Problem problem)
        throws ParseException
        {
                PddlParser parser = new PddlParser(domain, problem);

                parser.ReInit(domainReader);
                parser.Domain();

                parser.ReInit(problemReader);
                parser.Problem();

                problem.addEqualityLiterals();
        }

/***** DOMAIN ******/
  final public void Domain() throws ParseException {
        Token t;
    jj_consume_token(OPENBRACE);
    jj_consume_token(DEFINE);
    jj_consume_token(OPENBRACE);
    jj_consume_token(DOMAIN);
    t = jj_consume_token(NAME);
    jj_consume_token(CLOSEBRACE);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_2(2)) {
        Requirements();
      } else if (jj_2_3(2)) {
        Types();
      } else if (jj_2_4(2)) {
        Constants();
      } else if (jj_2_5(2)) {
        Predicates();
      } else if (jj_2_6(2)) {
        Action();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLOSEBRACE);
                domain.setName(t.image);
  }

  final public void Requirements() throws ParseException {
  Token t;
    jj_consume_token(OPENBRACE);
    jj_consume_token(REQUIREMENTS);
    label_2:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_2;
      }
      t = jj_consume_token(REQUIREMENT);
                             domain.addRequirement(t.image);
    }
    jj_consume_token(CLOSEBRACE);
  }

  final public void Types() throws ParseException {
        TypedNameList types;
    jj_consume_token(OPENBRACE);
    jj_consume_token(TYPES);
    types = TypedNameList();
    jj_consume_token(CLOSEBRACE);
                for( String type : types.getItems() ) {
                        domain.addSubtype(type, types.getType(type));
                }
  }

  final public void Constants() throws ParseException {
        TypedNameList constants;
    jj_consume_token(OPENBRACE);
    jj_consume_token(CONSTANTS);
    constants = TypedNameList();
    jj_consume_token(CLOSEBRACE);
                for( String constant : constants.getItems() ) {
                        domain.addConstant(constant, constants.getType(constant));
                }
  }

  final public void Predicates() throws ParseException {
    jj_consume_token(OPENBRACE);
    jj_consume_token(PREDICATES);
    label_3:
    while (true) {
      Predicate();
      if (jj_2_8(2)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(CLOSEBRACE);
  }

  final public void Predicate() throws ParseException {
        Predicate pred = new Predicate();
        TypedVariableList arguments = new TypedVariableList();
        Token t;
    jj_consume_token(OPENBRACE);
    t = jj_consume_token(NAME);
                       pred.setLabel(t.image);
    arguments = TypedVarList();
    jj_consume_token(CLOSEBRACE);
                for( Variable arg : arguments.getItems() ) {
                        pred.addVariable( arg, arguments.getType(arg) );
                }

                domain.addPredicate(pred);
  }

  final public void Action() throws ParseException {
        Token t;
        Predicate pred = new Predicate();
        Goal precondition = new crisp.planningproblem.goal.Conjunction();
        Effect effect = new crisp.planningproblem.effect.Conjunction();
    jj_consume_token(OPENBRACE);
    jj_consume_token(ACTION);
    t = jj_consume_token(NAME);
                                          pred.setLabel(t.image);
    label_4:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_10(2)) {
        ActionParameters(pred);
      } else if (jj_2_11(2)) {
        jj_consume_token(PRECONDITION);
        precondition = ActionPrecondition();
      } else if (jj_2_12(2)) {
        jj_consume_token(EFFECT);
        effect = ActionEffect();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLOSEBRACE);
                Action a = new Action(pred, precondition, effect);
                domain.addAction(a);
  }

  final public void ActionParameters(Predicate pred) throws ParseException {
        TypedVariableList parameters = new TypedVariableList();
    jj_consume_token(PARAMETERS);
    jj_consume_token(OPENBRACE);
    parameters = TypedVarList();
    jj_consume_token(CLOSEBRACE);
                for( Variable parameter : parameters.getItems() ) {
                        pred.addVariable(parameter, parameters.getType(parameter));
                }
  }

  final public Goal ActionPrecondition() throws ParseException {
        Goal sub;
        List<Goal> conjuncts = new ArrayList<Goal>();
        Term term;

        TypedVariableList variables = new TypedVariableList();
    if (jj_2_14(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(AND);
      label_5:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_5;
        }
        sub = ActionPrecondition();
                                                        conjuncts.add(sub);
      }
      jj_consume_token(CLOSEBRACE);
           Collections.reverse(conjuncts);
           {if (true) return new crisp.planningproblem.goal.Conjunction(conjuncts);}
    } else if (jj_2_15(2)) {
      term = Atom();
           {if (true) return new crisp.planningproblem.goal.Literal(term, true);}
    } else if (jj_2_16(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(NOT);
      sub = ActionPrecondition();
      jj_consume_token(CLOSEBRACE);
           if( sub instanceof crisp.planningproblem.goal.Literal ) {
                 Term t = ((crisp.planningproblem.goal.Literal) sub).getAtom();
                 {if (true) return new crisp.planningproblem.goal.Literal(t, false);}
           } else {
                 {if (true) return new crisp.planningproblem.goal.Negation(sub);}
           }
    } else if (jj_2_17(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(FORALL);
      jj_consume_token(OPENBRACE);
      variables = TypedVarList();
      jj_consume_token(CLOSEBRACE);
      sub = ActionPrecondition();
      jj_consume_token(CLOSEBRACE);
           {if (true) return new crisp.planningproblem.goal.Universal(variables, sub);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Effect ActionEffect() throws ParseException {
        Effect sub;
        List<Effect> conjuncts = new ArrayList<Effect>();
        Term term;

        TypedVariableList variables = new TypedVariableList();
        Goal condition;
    if (jj_2_19(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(AND);
      label_6:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_6;
        }
        sub = ActionEffect();
                                                  conjuncts.add(sub);
      }
      jj_consume_token(CLOSEBRACE);
           {if (true) return new crisp.planningproblem.effect.Conjunction(conjuncts);}
    } else if (jj_2_20(2)) {
      term = Atom();
           {if (true) return new crisp.planningproblem.effect.Literal(term, true);}
    } else if (jj_2_21(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(NOT);
      term = Atom();
      jj_consume_token(CLOSEBRACE);
           {if (true) return new crisp.planningproblem.effect.Literal(term, false);}
    } else if (jj_2_22(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(FORALL);
      jj_consume_token(OPENBRACE);
      variables = TypedVarList();
      jj_consume_token(CLOSEBRACE);
      sub = ActionEffect();
      jj_consume_token(CLOSEBRACE);
           {if (true) return new crisp.planningproblem.effect.Universal(variables, sub);}
    } else if (jj_2_23(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(WHEN);
      condition = ActionPrecondition();
      sub = ActionEffect();
      jj_consume_token(CLOSEBRACE);
            {if (true) return new crisp.planningproblem.effect.Conditional(condition, sub);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/******* PROBLEM ************/
  final public void Problem() throws ParseException {
        Token t;
    jj_consume_token(OPENBRACE);
    jj_consume_token(DEFINE);
    jj_consume_token(OPENBRACE);
    jj_consume_token(PROBLEM);
    t = jj_consume_token(NAME);
                                                                problem.setName(t.image);
    jj_consume_token(CLOSEBRACE);
    ProblemDomain();
    if (jj_2_24(2)) {
      ProblemObjects();
    } else {
      ;
    }
    ProblemInit();
    ProblemGoal();
    jj_consume_token(CLOSEBRACE);
  }

  final public void ProblemDomain() throws ParseException {
        Token t;
    jj_consume_token(OPENBRACE);
    jj_consume_token(DOMAIN_TAG);
    t = jj_consume_token(NAME);
    //problem.setDomain(t.image);
    jj_consume_token(CLOSEBRACE);
  }

  final public void ProblemObjects() throws ParseException {
        TypedNameList constants;
    jj_consume_token(OPENBRACE);
    jj_consume_token(OBJECT);
    constants = TypedNameList();
    jj_consume_token(CLOSEBRACE);
                for( String constant : constants.getItems() ) {
                        domain.addConstant(constant, constants.getType(constant));
                }
  }

  final public void ProblemInit() throws ParseException {
        Term t;
    jj_consume_token(OPENBRACE);
    jj_consume_token(INIT);
    label_7:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_7;
      }
      t = Atom();
                      problem.addToInitialState(t);
    }
    jj_consume_token(CLOSEBRACE);
  }

  final public void ProblemGoal() throws ParseException {
        Goal g;
    jj_consume_token(OPENBRACE);
    jj_consume_token(GOAL);
    g = ActionPrecondition();
                                   problem.setGoal(g);
    jj_consume_token(CLOSEBRACE);
  }

/****** UTILITY NONTERMINALS *******/
  final public Term Atom() throws ParseException {
        Token t,v,x,y;
        List<Term> subterms = new ArrayList<Term>();
        Term t1, t2;
    if (jj_2_29(2)) {
      jj_consume_token(OPENBRACE);
      t = jj_consume_token(NAME);
      label_8:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_8;
        }
        if (jj_2_27(2)) {
          v = jj_consume_token(VAR);
                     subterms.add(new Variable(v.image));
        } else if (jj_2_28(2)) {
          v = jj_consume_token(NAME);
                           subterms.add(new Constant(v.image));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CLOSEBRACE);
                {if (true) return new Compound(t.image, subterms);}
    } else if (jj_2_30(2)) {
      jj_consume_token(OPENBRACE);
      jj_consume_token(EQ);
      t1 = Term();
      t2 = Term();
      jj_consume_token(CLOSEBRACE);
                subterms.add(t1);
                subterms.add(t2);
                {if (true) return new Compound("**equals**", subterms);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
        Token t;
    if (jj_2_31(2)) {
      t = jj_consume_token(VAR);
                    {if (true) return new Variable(t.image);}
    } else if (jj_2_32(2)) {
      t = jj_consume_token(NAME);
                       {if (true) return new Constant(t.image);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedVariableList TypedVarList() throws ParseException {
        List<Variable> variables = new ArrayList<Variable>();
        Token t, v, type_tok = null;
        String type;
        TypedVariableList ret = new TypedVariableList();
    label_9:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_9;
      }
      label_10:
      while (true) {
        v = jj_consume_token(VAR);
                      variables.add(new Variable(v.image));
        if (jj_2_34(2)) {
          ;
        } else {
          break label_10;
        }
      }
      if (jj_2_35(2)) {
        jj_consume_token(DASH);
        type_tok = jj_consume_token(NAME);
      } else {
        ;
      }
                if( type_tok == null ) {
                        type = TypeHierarchy.TOP;
                } else {
                        type = type_tok.image;
                }

                for( Variable variable : variables ) {
                        ret.addItem(variable, type);
                }

                variables.clear();
                type_tok = null;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public TypedNameList TypedNameList() throws ParseException {
        List<String> names = new ArrayList<String>();
        Token t, v, type_tok = null;
        String type;
        TypedNameList ret = new TypedNameList();
    label_11:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_11;
      }
      label_12:
      while (true) {
        v = jj_consume_token(NAME);
                       names.add(v.image);
        if (jj_2_37(2)) {
          ;
        } else {
          break label_12;
        }
      }
      if (jj_2_38(2)) {
        jj_consume_token(DASH);
        type_tok = jj_consume_token(NAME);
      } else {
        ;
      }
                if( type_tok == null ) {
                        type = TypeHierarchy.TOP;
                } else {
                        type = type_tok.image;
                }

                for( String variable : names ) {
                        ret.addItem(variable, type);
                }

                names.clear();
                type_tok = null;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(PREDICATES)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(CONSTANTS)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(DASH)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    Token xsp;
    if (jj_3_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(TYPES)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(REQUIREMENT)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(REQUIREMENTS)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(PARAMETERS)) return true;
    if (jj_scan_token(OPENBRACE)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(DASH)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(EFFECT)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(PRECONDITION)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(OPENBRACE)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  public PddlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[38];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PddlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PddlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PddlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PddlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PddlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PddlParser(PddlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PddlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[72];
    for (int i = 0; i < 72; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 38; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
